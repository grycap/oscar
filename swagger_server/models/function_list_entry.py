# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FunctionListEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, image: str=None, invocation_count: float=None, replicas: float=None, available_replicas: float=None, env_process: str=None, labels: Dict[str, str]=None, annotations: Dict[str, str]=None):  # noqa: E501
        """FunctionListEntry - a model defined in Swagger

        :param name: The name of this FunctionListEntry.  # noqa: E501
        :type name: str
        :param image: The image of this FunctionListEntry.  # noqa: E501
        :type image: str
        :param invocation_count: The invocation_count of this FunctionListEntry.  # noqa: E501
        :type invocation_count: float
        :param replicas: The replicas of this FunctionListEntry.  # noqa: E501
        :type replicas: float
        :param available_replicas: The available_replicas of this FunctionListEntry.  # noqa: E501
        :type available_replicas: float
        :param env_process: The env_process of this FunctionListEntry.  # noqa: E501
        :type env_process: str
        :param labels: The labels of this FunctionListEntry.  # noqa: E501
        :type labels: Dict[str, str]
        :param annotations: The annotations of this FunctionListEntry.  # noqa: E501
        :type annotations: Dict[str, str]
        """
        self.swagger_types = {
            'name': str,
            'image': str,
            'invocation_count': float,
            'replicas': float,
            'available_replicas': float,
            'env_process': str,
            'labels': Dict[str, str],
            'annotations': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'invocation_count': 'invocationCount',
            'replicas': 'replicas',
            'available_replicas': 'availableReplicas',
            'env_process': 'envProcess',
            'labels': 'labels',
            'annotations': 'annotations'
        }

        self._name = name
        self._image = image
        self._invocation_count = invocation_count
        self._replicas = replicas
        self._available_replicas = available_replicas
        self._env_process = env_process
        self._labels = labels
        self._annotations = annotations

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FunctionListEntry of this FunctionListEntry.  # noqa: E501
        :rtype: FunctionListEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this FunctionListEntry.

        The name of the function  # noqa: E501

        :return: The name of this FunctionListEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FunctionListEntry.

        The name of the function  # noqa: E501

        :param name: The name of this FunctionListEntry.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image(self) -> str:
        """Gets the image of this FunctionListEntry.

        The fully qualified docker image name of the function  # noqa: E501

        :return: The image of this FunctionListEntry.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this FunctionListEntry.

        The fully qualified docker image name of the function  # noqa: E501

        :param image: The image of this FunctionListEntry.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def invocation_count(self) -> float:
        """Gets the invocation_count of this FunctionListEntry.

        The amount of invocations for the specified function  # noqa: E501

        :return: The invocation_count of this FunctionListEntry.
        :rtype: float
        """
        return self._invocation_count

    @invocation_count.setter
    def invocation_count(self, invocation_count: float):
        """Sets the invocation_count of this FunctionListEntry.

        The amount of invocations for the specified function  # noqa: E501

        :param invocation_count: The invocation_count of this FunctionListEntry.
        :type invocation_count: float
        """
        if invocation_count is None:
            raise ValueError("Invalid value for `invocation_count`, must not be `None`")  # noqa: E501

        self._invocation_count = invocation_count

    @property
    def replicas(self) -> float:
        """Gets the replicas of this FunctionListEntry.

        The current minimal ammount of replicas  # noqa: E501

        :return: The replicas of this FunctionListEntry.
        :rtype: float
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas: float):
        """Sets the replicas of this FunctionListEntry.

        The current minimal ammount of replicas  # noqa: E501

        :param replicas: The replicas of this FunctionListEntry.
        :type replicas: float
        """
        if replicas is None:
            raise ValueError("Invalid value for `replicas`, must not be `None`")  # noqa: E501

        self._replicas = replicas

    @property
    def available_replicas(self) -> float:
        """Gets the available_replicas of this FunctionListEntry.

        The current available amount of replicas  # noqa: E501

        :return: The available_replicas of this FunctionListEntry.
        :rtype: float
        """
        return self._available_replicas

    @available_replicas.setter
    def available_replicas(self, available_replicas: float):
        """Sets the available_replicas of this FunctionListEntry.

        The current available amount of replicas  # noqa: E501

        :param available_replicas: The available_replicas of this FunctionListEntry.
        :type available_replicas: float
        """
        if available_replicas is None:
            raise ValueError("Invalid value for `available_replicas`, must not be `None`")  # noqa: E501

        self._available_replicas = available_replicas

    @property
    def env_process(self) -> str:
        """Gets the env_process of this FunctionListEntry.

        Process for watchdog to fork  # noqa: E501

        :return: The env_process of this FunctionListEntry.
        :rtype: str
        """
        return self._env_process

    @env_process.setter
    def env_process(self, env_process: str):
        """Sets the env_process of this FunctionListEntry.

        Process for watchdog to fork  # noqa: E501

        :param env_process: The env_process of this FunctionListEntry.
        :type env_process: str
        """
        if env_process is None:
            raise ValueError("Invalid value for `env_process`, must not be `None`")  # noqa: E501

        self._env_process = env_process

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this FunctionListEntry.


        :return: The labels of this FunctionListEntry.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this FunctionListEntry.


        :param labels: The labels of this FunctionListEntry.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def annotations(self) -> Dict[str, str]:
        """Gets the annotations of this FunctionListEntry.


        :return: The annotations of this FunctionListEntry.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: Dict[str, str]):
        """Sets the annotations of this FunctionListEntry.


        :param annotations: The annotations of this FunctionListEntry.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations
