# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FunctionDefinitionLimits(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, memory: str=None, cpu: str=None):  # noqa: E501
        """FunctionDefinitionLimits - a model defined in Swagger

        :param memory: The memory of this FunctionDefinitionLimits.  # noqa: E501
        :type memory: str
        :param cpu: The cpu of this FunctionDefinitionLimits.  # noqa: E501
        :type cpu: str
        """
        self.swagger_types = {
            'memory': str,
            'cpu': str
        }

        self.attribute_map = {
            'memory': 'memory',
            'cpu': 'cpu'
        }

        self._memory = memory
        self._cpu = cpu

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionDefinitionLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FunctionDefinition_limits of this FunctionDefinitionLimits.  # noqa: E501
        :rtype: FunctionDefinitionLimits
        """
        return util.deserialize_model(dikt, cls)

    @property
    def memory(self) -> str:
        """Gets the memory of this FunctionDefinitionLimits.


        :return: The memory of this FunctionDefinitionLimits.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory: str):
        """Sets the memory of this FunctionDefinitionLimits.


        :param memory: The memory of this FunctionDefinitionLimits.
        :type memory: str
        """

        self._memory = memory

    @property
    def cpu(self) -> str:
        """Gets the cpu of this FunctionDefinitionLimits.


        :return: The cpu of this FunctionDefinitionLimits.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: str):
        """Sets the cpu of this FunctionDefinitionLimits.


        :param cpu: The cpu of this FunctionDefinitionLimits.
        :type cpu: str
        """

        self._cpu = cpu
