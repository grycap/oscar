# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FunctionDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, image: str=None, script: str=None):  # noqa: E501
        """FunctionDefinition - a model defined in Swagger

        :param name: The name of this FunctionDefinition.  # noqa: E501
        :type name: str
        :param image: The image of this FunctionDefinition.  # noqa: E501
        :type image: str
        :param script: The script of this FunctionDefinition.  # noqa: E501
        :type script: str
        """
        self.swagger_types = {
            'name': str,
            'image': str,
            'script': str
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'script': 'script'
        }

        self._name = name
        self._image = image
        self._script = script

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FunctionDefinition of this FunctionDefinition.  # noqa: E501
        :rtype: FunctionDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this FunctionDefinition.

        Name of deployed function  # noqa: E501

        :return: The name of this FunctionDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FunctionDefinition.

        Name of deployed function  # noqa: E501

        :param name: The name of this FunctionDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image(self) -> str:
        """Gets the image of this FunctionDefinition.

        Docker image in accessible registry  # noqa: E501

        :return: The image of this FunctionDefinition.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this FunctionDefinition.

        Docker image in accessible registry  # noqa: E501

        :param image: The image of this FunctionDefinition.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def script(self) -> str:
        """Gets the script of this FunctionDefinition.

        Script to be executed inside the function coded in base64  # noqa: E501

        :return: The script of this FunctionDefinition.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script: str):
        """Sets the script of this FunctionDefinition.

        Script to be executed inside the function coded in base64  # noqa: E501

        :param script: The script of this FunctionDefinition.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501

        self._script = script
