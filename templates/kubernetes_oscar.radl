
description kubernetes (
    kind = 'main' and
    short = 'Install and configure a cluster using the grycap.kubernetes ansible role and install all needed services to run OSCAR.' and
    content = 'The template installs the grycap.kubernetes ansible role. Initially the template creates as many working node hostnames as the sum of the values of feature "ec3_max_instances_max" in every system.

Webpage: https://kubernetes.io/'
)

network public (
  # kubernetes ports
  outbound = 'yes' and
  outports contains '6443/tcp'
)

network private ()

system front (
  cpu.count>=2 and
  memory.size>=2048m and
  net_interface.0.connection = 'private' and
  net_interface.0.dns_name = 'kubeserver' and
  net_interface.1.connection = 'public' and
  net_interface.1.dns_name = 'kubeserverpublic' and
  queue_system = 'kubernetes' and
  ec3_templates contains 'kubernetes_oscar' and
  disk.0.applications contains (name = 'ansible.modules.grycap.kubernetes,nfs') and
  disk.0.applications contains (name='ansible.modules.grycap.nfs') and
  disk.0.applications contains (name = 'ansible.modules.grycap.kubefaas') and
  disk.0.applications contains (name = 'ansible.modules.grycap.kubeminio') and
  disk.0.applications contains (name = 'ansible.modules.grycap.kubeventgateway') and
  disk.0.applications contains (name = 'ansible.modules.grycap.kuberegistry') and
  disk.0.applications contains (name = 'ansible.modules.grycap.kubeoscar') and
  disk.0.applications contains (name = 'ansible.modules.grycap.oscarui') and
  disk.1.size=20GB and
  disk.1.fstype='ext4' and
  disk.1.mount_path='/pv/minio' and
  disk.2.size=20GB and
  disk.2.fstype='ext4' and
  disk.2.mount_path='/pv/registry'
)

configure front (
@begin
---
  - pre_tasks:
    # - name: Create dir for the NFS PV Top dir
    #   file: path=/pv state=directory mode=755
    # - name: Create dir for the minio NFS PV Top dir
    #   file: path=/pv/minio state=directory mode=755
    # - name: Create dir for the docker registry NFS PV Top dir
    #   file: path=/pv/minio state=directory mode=755
    - name: Create dir for the etcd NFS PV Top dir
      file: path=/pv/etcd-event-gateway state=directory mode=755

    roles:
    - role: 'grycap.nfs'
      nfs_mode: 'front'
      nfs_exports:
      - {path: "/pv/minio", export: "wn*.localdomain(rw,async,no_root_squash,no_subtree_check,insecure)"}
      - {path: "/pv/registry", export: "wn*.localdomain(rw,async,no_root_squash,no_subtree_check,insecure)"}
      - {path: "/pv/etcd-event-gateway", export: "wn*.localdomain(rw,async,no_root_squash,no_subtree_check,insecure)"}

    - role: 'grycap.kubernetes'
      kube_server: 'kubeserver'
      kube_apiserver_options: [{option: "--insecure-port", value: "8080"}]
      kube_install_metrics_server: true
      kube_persistent_volumes:
      - {namespace : "minio", name : "pvnfsminio", label : "minio", capacity_storage : "20Gi", nfs_path : "/pv/minio"}
      - {namespace : "docker-registry", name : "pvnfsregistry", label : "registry", capacity_storage : "20Gi", nfs_path : "/pv/registry"}
      - {namespace : "event-gateway", name : "pvnfsetcdeg", label : "event-gateway", capacity_storage : "2Gi", nfs_path : "/pv/etcd-event-gateway"}

    - role: 'grycap.kubefaas'
      faas_framework: 'openfaas'

    - role: 'grycap.kubeminio'

    - role: 'grycap.kubeventgateway'

    - role: 'grycap.kuberegistry'
      public_access: false
      type_of_node: "front"
      svc_name: "registry.docker-registry"
      delete_enabled: true
      
    - role: 'grycap.kubeoscar'    

    - role: 'grycap.oscarui'
      vue_app_backend_host: '{{ hostvars[groups["front"][0]]["IM_NODE_PUBLIC_IP"] }}'

@end
)

system wn (
  memory.size>=2048m and
  net_interface.0.connection='private'
)

configure wn (
@begin
---
  - roles:
    - role: 'grycap.nfs'
      nfs_mode: 'wn'
      nfs_client_imports:
      - {local: "/pv/minio", remote: "/pv/minio", server_host: "kubeserver.localdomain"}
      - {local: "/pv/registry", remote: "/pv/registry", server_host: "kubeserver.localdomain"}
      - {local: "/pv/etcd-event-gateway", remote: "/pv/etcd-event-gateway", server_host: "kubeserver.localdomain"}

    - role: 'grycap.kubernetes'
      kube_type_of_node: 'wn'
      kube_server: 'kubeserver'

    - role: 'grycap.kuberegistry'
      public_access: false
      type_of_node: "wn"
      svc_name: "registry.docker-registry"
@end
)

include kube_misc (
  template = 'openports im clues2'
)

deploy front 1
